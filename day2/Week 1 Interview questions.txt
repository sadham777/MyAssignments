✅ 1. What are the different data types in Java?
Your Answer: int, float, double, char, boolean, string
✔ Feedback:

You're mostly correct, but in Java, data types are split into two categories:
Primitive data types (8 total):

byte, short, int, long, float, double, char, boolean
Non-primitive data types:

String, Arrays, Classes, Interfaces, etc.

👉 So String is not a primitive — it's a class (non-primitive type).

✅ 2. Difference between int and Integer
Your Answer: int is a data type that defines only numbers; Integer is a value consisting of numbers
✔ Feedback:

Good try! Here's the refined explanation:

int is a primitive data type.

Integer is a wrapper class for int in Java — it allows you to use an int like an object.

Integer provides methods and can be used with collections (like ArrayList<Integer>), while int cannot.

🧠 Tip: Think of Integer as “int + object behavior”.

✅ 3. What is the size of float and double in Java?
Your Answer: float - 7 digits, denoted by F or f; double - more than 7 digits
✔ Feedback:

Correct idea! To be more precise:

float: 32-bit, approx. 6 to 7 decimal digits (float num = 3.14f;)

double: 64-bit, approx. 15 decimal digits

⚠️ 4. Is char a numeric data type in Java?
Your Answer: To represent single character or word
✔ Feedback:

Partially right, but here’s the key point:

char is a primitive data type used to represent a single character (e.g., 'A', '7').

Under the hood, char stores a numeric Unicode value, so technically it is stored as a number, but we use it to represent characters.

✅ 5. Can you store a decimal value in a byte variable?
Your Answer: No
✔ Feedback:

✔ Correct!

byte only stores whole numbers (range: -128 to 127).

Decimal values require float or double.


✅ 1. What is the difference between JDK, JRE, and JVM?
Your answer: Not yet taught
✔ Explanation:

JVM (Java Virtual Machine): Runs Java bytecode. It's where your program actually runs.

JRE (Java Runtime Environment): Contains JVM + libraries required to run Java applications.

JDK (Java Development Kit): Full package — contains JRE + tools like javac (compiler) to write and compile Java code.

🧠 In short:

JDK = JRE + Development Tools
JRE = JVM + Libraries

⚠️ 2. What are the rules for naming variables in Java?
Your answer: For string need "", for integer not ""
✔ Feedback:
That’s how values are assigned, not variable naming rules.

📌 Actual naming rules:

Must start with a letter, $, or _

Can contain letters, numbers, $, _ (but cannot start with a number)

Cannot use Java keywords (class, int, etc.)

Case-sensitive (Name ≠ name)

✅ Valid: myName, _count, salary1
❌ Invalid: 1name, int, my-name

⚠️ 3. What is type casting?
Your answer: Not sure
✔ Explanation:
Type casting means converting one data type into another.

🔸 Implicit casting (small to large):

java
Copy
Edit
int x = 10;
double y = x;  // int to double automatically
🔸 Explicit casting (large to small):

java
Copy
Edit
double a = 9.5;
int b = (int) a;  // Manual cast (b = 9)
⚠️ 4. What is the default value of a boolean and int in Java?
Your answer: Boolean = true/false; int = numbers
✔ Feedback:

The default value (when not assigned) is:

boolean → false

int → 0

So:

java
Copy
Edit
boolean b;  // default: false
int i;      // default: 0

✅ 5. What is the purpose of the main() method?
Your answer: To execute the program
✔ Feedback:
Correct! The main() method is the entry point for a Java application.

Example:

java
Copy
Edit
public static void main(String[] args) {
    System.out.println("Hello Java");
}
If it’s missing, the program won’t run.

✅ How do you create an object in Java?
Your Answer:
className objectName = new className();
✔ Feedback:
Perfect! That’s exactly how you create an object in Java.

📌 Example:

java
Copy
Edit
public class Dog {
    public void bark() {
        System.out.println("Woof!");
    }

    public static void main(String[] args) {
        Dog myDog = new Dog(); // object creation
        myDog.bark(); // method call
    }
}
⚠️ What happens if you create a method with the same name as the class?
Your Answer: We can't create
❗ Correction: You can create a method with the same name as the class — but it becomes a constructor, not a regular method.

📌 Example:

java
Copy
Edit
public class Student {

    // Constructor (no return type, same name as class)
    Student() {
        System.out.println("This is a constructor.");
    }

    // Regular method
    void Student() {
        System.out.println("This is a method, but has return type.");
    }

    public static void main(String[] args) {
        Student s = new Student(); // Constructor will run
        s.Student(); // Method will run
    }
}
🧠 Rule:
If it has no return type, and same name as the class → it's a constructor

If it has a return type (even void) → it's just a method that happens to match the class name


